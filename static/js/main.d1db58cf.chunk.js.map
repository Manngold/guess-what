{"version":3,"sources":["components/Classifier.js","components/Uploader.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Image","img","List","ul","Item","li","Classifier","imageSrc","useState","results","setResults","isLoading","setLoading","src","id","onLoad","classifier","ml5","imageClassifier","console","log","image","document","querySelector","predict","err","classifiedResults","then","crossOrigin","map","result","index","label","confidence","key","Math","floor","Upload","input","Uploader","setImageSrc","type","onChange","e","imgSrc","target","value","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4uBAKA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAAQF,IAAOG,IAAV,KAKLC,EAAOJ,IAAOK,GAAV,KAIJC,EAAON,IAAOO,GAAV,KAoDKC,MAjDf,YAAmC,IAAbC,EAAY,EAAZA,SAAY,EACAC,mBAAS,IADT,mBACvBC,EADuB,KACdC,EADc,OAEEF,oBAAS,GAFX,mBAEvBG,EAFuB,KAEZC,EAFY,KAqB9B,OACI,kBAACf,EAAD,KACI,kBAACG,EAAD,CACIa,IAAKN,EACLO,GAAG,QACHC,OAtBQ,WAChBH,GAAW,GACX,IAAMI,EAAaC,IAAIC,gBAAgB,aAAa,kBAChDC,QAAQC,IAAI,oBAGVC,EAAQC,SAASC,cAAc,UAErCP,EACKQ,QAAQH,EAAO,GAAG,SAACI,EAAKC,GACrB,OAAOA,KAEVC,MAAK,SAACD,GACHd,GAAW,GACXF,EAAWgB,OASXE,YAAY,cAEfjB,EACG,kBAAC,IAAD,MAEA,kBAACT,EAAD,KACKO,EAAQoB,KAAI,SAACC,EAAQC,GAAW,IACrBC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,WACf,OACI,kBAAC7B,EAAD,CAAM8B,IAAKH,GAAX,UACIA,EAAQ,EADZ,4BAEoBC,EAFpB,cAE+BG,KAAKC,MACnB,IAAbH,GAHJ,Y,qMC1D5B,IAAMpC,EAAYC,IAAOC,IAAV,KAETsC,EAASvC,IAAOwC,MAAV,KAsBGC,MAhBf,YAAoC,IAAhBC,EAAe,EAAfA,YAKhB,OACI,kBAAC,EAAD,KACI,kBAACH,EAAD,CACII,KAAK,OACLC,SARQ,SAACC,GACjB,IAAMC,EAASD,EAAEE,OAAOC,MACxBN,EAAYI,IAOJG,YAAY,uB,2RChB5B,IAAMlD,EAAYC,IAAOC,IAAV,KAuBAiD,MAXf,WAAgB,IAAD,EACqBxC,qBADrB,mBACJD,EADI,KACMiC,EADN,KAGX,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUA,YAAaA,IACvB,kBAAC,EAAD,CAAYjC,SAAUA,MCXd0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJlC,SAASmC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.d1db58cf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ml5 from \"ml5\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst Container = styled.div`\n    margin-top: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n\nconst Image = styled.img`\n    height: 20rem;\n    width: 30rem;\n`;\n\nconst List = styled.ul`\n    margin-top: 20px;\n`;\n\nconst Item = styled.li`\n    list-style-type: none;\n`;\nfunction Classifier({ imageSrc }) {\n    const [results, setResults] = useState([]);\n    const [isLoading, setLoading] = useState(false);\n\n    const classifyImg = () => {\n        setLoading(true);\n        const classifier = ml5.imageClassifier(\"MobileNet\", () =>\n            console.log(\"Module loaded\")\n        );\n\n        const image = document.querySelector(\"#image\");\n\n        classifier\n            .predict(image, 5, (err, classifiedResults) => {\n                return classifiedResults;\n            })\n            .then((classifiedResults) => {\n                setLoading(false);\n                setResults(classifiedResults);\n            });\n    };\n    return (\n        <Container>\n            <Image\n                src={imageSrc}\n                id=\"image\"\n                onLoad={classifyImg}\n                crossOrigin=\"anonymous\"\n            />\n            {isLoading ? (\n                <ClipLoader />\n            ) : (\n                <List>\n                    {results.map((result, index) => {\n                        const { label, confidence } = result;\n                        return (\n                            <Item key={index}>{`${\n                                index + 1\n                            }. Predictation : ${label} , ${Math.floor(\n                                confidence * 100\n                            )}%`}</Item>\n                        );\n                    })}\n                </List>\n            )}\n        </Container>\n    );\n}\n\nexport default Classifier;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div``;\n\nconst Upload = styled.input`\n    border: none;\n    width: 16rem;\n    height: 2rem;\n`;\n\nfunction Uploader({ setImageSrc }) {\n    const changeImage = (e) => {\n        const imgSrc = e.target.value;\n        setImageSrc(imgSrc);\n    };\n    return (\n        <Container>\n            <Upload\n                type=\"text\"\n                onChange={changeImage}\n                placeholder=\"Insert Image Url\"\n            />\n        </Container>\n    );\n}\n\nexport default Uploader;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Classifier from \"./components/Classifier\";\nimport Uploader from \"./components/Uploader\";\n\nconst Container = styled.div`\n    margin: 0px;\n    padding: 0px;\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    background-color: #ecf0f1;\n`;\n\nfunction App() {\n    const [imageSrc, setImageSrc] = useState();\n\n    return (\n        <Container>\n            <Uploader setImageSrc={setImageSrc} />\n            <Classifier imageSrc={imageSrc} />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}