{"version":3,"sources":["components/Classifier.js","components/Uploader.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Image","img","List","ul","Item","li","Classifier","imageSrc","results","setResults","setChartData","useState","isLoading","setLoading","length","src","id","onLoad","data","columns","type","title","classifier","ml5","imageClassifier","console","log","image","document","querySelector","predict","err","classifiedResults","then","result","label","confidence","push","onError","e","preventDefault","target","crossOrigin","map","index","key","Math","floor","Upload","input","Button","Uploader","setImageSrc","placeholder","onClick","value","imgSrc","DonutChart","chartData","AppContainer","Title","h1","ChartContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa855ae6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ml5 from \"ml5\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst Container = styled.div`\n    margin-top: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n\nconst Image = styled.img`\n    height: 30rem;\n    width: 40rem;\n`;\n\nconst List = styled.ul`\n    margin-top: 20px;\n`;\n\nconst Item = styled.li`\n    list-style-type: none;\n`;\nfunction Classifier({ imageSrc, results, setResults, setChartData }) {\n    const [isLoading, setLoading] = useState(false);\n\n    const loadErrorHandler = (e) => {\n        e.preventDefault();\n        e.target.src =\n            \"https://miro.medium.com/max/2800/0*heiz7awNkQ1B0O8e.png\";\n    };\n\n    const classifyImg = () => {\n        setLoading(true);\n        let data = {\n            columns: [],\n            type: \"donut\",\n            title: \"Top 5\",\n        };\n\n        const classifier = ml5.imageClassifier(\"MobileNet\", () =>\n            console.log(\"Module loaded\")\n        );\n\n        const image = document.querySelector(\"#image\");\n\n        classifier\n            .predict(image, 5, (err, classifiedResults) => {\n                return classifiedResults;\n            })\n            .then((classifiedResults) => {\n                setLoading(false);\n                setResults(classifiedResults);\n                for (let result of classifiedResults) {\n                    const { columns } = data;\n                    const { label, confidence } = result;\n                    columns.push([label, confidence]);\n                }\n                setChartData(data);\n            });\n    };\n    return (\n        <Container>\n            {imageSrc && imageSrc.length !== 0 ? (\n                <Image\n                    src={imageSrc}\n                    id=\"image\"\n                    onLoad={classifyImg}\n                    onError={loadErrorHandler}\n                    crossOrigin=\"anonymous\"\n                />\n            ) : (\n                <span>Please Load Image</span>\n            )}\n            {isLoading ? (\n                <ClipLoader />\n            ) : (\n                <List>\n                    {results.map((result, index) => {\n                        const { label, confidence } = result;\n                        return (\n                            <Item key={index}>{`${\n                                index + 1\n                            }. Predictation : ${label} , ${Math.floor(\n                                confidence * 100\n                            )}%`}</Item>\n                        );\n                    })}\n                </List>\n            )}\n        </Container>\n    );\n}\n\nexport default Classifier;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div``;\n\nconst Upload = styled.input`\n    border: none;\n    width: 16rem;\n    line-height: 2rem;\n    font-size: 1rem;\n    padding-left: 10px;\n    outline: none;\n`;\nconst Button = styled.input`\n    margin-left: 20px;\n    font-size: 2rem;\n`;\nfunction Uploader({ setImageSrc }) {\n    const changeImage = (e) => {\n        e.preventDefault();\n        const imgSrc = document.querySelector(\"#url_container\").value;\n        setImageSrc(imgSrc);\n    };\n    const clearInput = (e) => {\n        e.target.value = \"\";\n    };\n    return (\n        <Container>\n            <Upload\n                id=\"url_container\"\n                type=\"text\"\n                placeholder=\"Insert Image Url\"\n                onClick={clearInput}\n            />\n            <Button type=\"submit\" onClick={changeImage} value=\"Upload\" />\n        </Container>\n    );\n}\n\nexport default Uploader;\n","import React from \"react\";\nimport C3Chart from \"react-c3js\";\nimport \"c3/c3.css\";\n\nfunction DonutChart({ chartData }) {\n    if (!chartData) {\n        return <div>Here is chart section</div>;\n    } else {\n        return <C3Chart data={chartData}></C3Chart>;\n    }\n}\n\nexport default DonutChart;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Classifier from \"./components/Classifier\";\nimport Uploader from \"./components/Uploader\";\nimport DonutChart from \"./components/Chart\";\n\nconst AppContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #ecf0f1;\n    height: 100vh;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n`;\n\nconst Container = styled.div`\n    margin: 0px;\n    padding: 0px;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n\nconst Title = styled.h1``;\n\nconst ChartContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n`;\n\nfunction App() {\n    const [imageSrc, setImageSrc] = useState();\n    const [results, setResults] = useState([]);\n    const [chartData, setChartData] = useState();\n\n    return (\n        <AppContainer>\n            <Container>\n                <Title>Guess What</Title>\n                <Uploader imageSrc={imageSrc} setImageSrc={setImageSrc} />\n                <Classifier\n                    imageSrc={imageSrc}\n                    results={results}\n                    setResults={setResults}\n                    setChartData={setChartData}\n                />\n            </Container>\n            <ChartContainer>\n                <DonutChart chartData={chartData} />\n            </ChartContainer>\n        </AppContainer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}